#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/sequent/generator'

command = ARGV[0].to_s.strip
args = (ARGV[1..-1] || []).map(&:to_s).map(&:strip)

if command.empty?
  abort <<~EOS
    Usage: #{$PROGRAM_NAME} command arguments...

    Please specify a command, for example `sequent new myapp`. Available commands:

      new appname                 Generate a new project from the Sequent template
                                  project
      generate type arguments...  Generate a new aggregate, command, or event
  EOS
end

def new_project(name = nil, *args)
  abort('Please specify a directory name. i.e. `sequent new myapp`') if name.empty?
  abort("Unknown arguments '#{args.join(' ')}', aborting") unless args.empty?

  Sequent::Generator::Project.new(name).execute
  puts <<~NEXTSTEPS

    Success!

    Your brand spanking new sequent app is waiting for you in:
      #{File.expand_path(name, Dir.pwd)}

    To finish setting up your app:
      cd #{name}
      bundle install
      bundle exec rake sequent:db:create
      bundle exec rake sequent:db:create_view_schema
      bundle exec rake sequent:migrate:online
      bundle exec rake sequent:migrate:offline

    Run the example specs:
      SEQUENT_ENV=test bundle exec rake sequent:db:create
      bundle exec rspec spec

    To generate new aggregates use:
      sequent generate <aggregate_name>. e.g. sequent generate address

    For more information see:
      https://www.sequent.io

    Happy coding!

  NEXTSTEPS
rescue TargetAlreadyExists
  abort("Target '#{name}' already exists, aborting")
end

def generate_aggregate(aggregate_name = nil, *args)
  abort('Please specify an aggregate name. i.e. `sequent g aggregate user`') unless args_valid?(aggregate_name)
  abort("Unknown arguments '#{args.join(' ')}', aborting") unless args.empty?

  Sequent::Generator::Aggregate.new(aggregate_name).execute
  puts "#{aggregate_name} aggregate has been generated"
rescue TargetAlreadyExists
  abort("Target '#{aggregate_name}' already exists, aborting")
end

def generate_command(aggregate_name = nil, command_name = nil, *attrs)
  unless args_valid?(aggregate_name, command_name)
    abort('Please specify an aggregate name and command name. i.e. `sequent g command User AddUser`')
  end
  Sequent::Generator::Command.new(aggregate_name, command_name, attrs).execute
  puts "#{command_name} command has been added to #{aggregate_name}"
rescue NoAggregateFound
  abort("Aggregate '#{aggregate_name}' not found, aborting")
end

def generate_event(aggregate_name = nil, event_name = nil, *attrs)
  abort('Please specify an aggregate name and event name. i.e. `sequent g event User UserAdded`') unless args_valid?(
    aggregate_name, event_name
  )
  Sequent::Generator::Event.new(aggregate_name, event_name, attrs).execute
  puts "#{event_name} event has been added to #{aggregate_name}"
rescue NoAggregateFound
  abort("Aggregate '#{aggregate_name}' not found, aborting")
end

def generate(entity = nil, *args)
  case entity
  when 'aggregate'
    generate_aggregate(*args)
  when 'command'
    generate_command(*args)
  when 'event'
    generate_event(*args)
  else
    abort <<~EOS
      Unknown type for `generate`. Try `sequent g aggregate User`. Available options:

        generate aggregate Name
              Generates the aggregate `Name`

        generate command Aggregate Command attributes...
              Generates the command `Command` for aggregate `Aggregate`

        generate event Aggregate Event attributes...
              Generates the event `Event` for aggregate `Aggregate`
    EOS
  end
end

def args_valid?(*args)
  args.none?(&:empty?)
end

case command
when 'new'
  new_project(*args)
when 'generate', 'g'
  generate(*args)
else
  abort("Unknown command #{command}. Try `sequent new myapp`")
end
